(str: vec[int]) => // of known size N, we also know recursion depth R; size of int type should be log N (with an extra bit for '$' symbol)
len := len(str)
strs := vec[vec[int]](R) // maximum size R, we can also precisely size the inner vectors based on size at each recursion level
strs[0] = str
level := 0
cur := strs[level]
// STEP 1: recurse down and generate alphabets for each recursion level (strs)
while (len > 1) {
  tups := vec[((int,int,int), int)](N) // virtual storage, hopefully not necessary, maximum size N
  pos := 0
  cnt := 0
  // like a windowedFlatMapWithIndex over cur with window size 3
  while (pos + 1 < len) {
    tups[cnt] = ((cur[pos + 1], cur[pos + 2], cur[pos + 3]), pos + 1) // out of bounds accesses replaced with '$'
    // TODO pos + 2 for the second item of the tuple is wrong! Needs to come after everything that is 1 mod 3!
    tups[cnt + 1] = ((cur[pos + 2], cur[pos + 3], cur[pos + 4]), pos + 2) // out of bounds accesses replaced with '$'
    pos += 3
    cnt += if (pos + 2 == len) 1 else 2
  }
  sorted := sort(tups, 0, cnt, key = t.0)
  sortedWithIdx := mapWithIndex(sorted, (t, i) => (t.1, i))
  ordered := sort(sortedWithIdx, 0, cnt, key = t.0)
  strs[level + 1] = map(ordered, t => t.1)
  len = cnt 
  level += 1
  cur = strs[level]
}

fs := vec[vec[int](N)](2) // double buffered (necessary?)
side := 0  // side of double buffer
fs[side][0] = cur[0] // we know cur must have length 1 at this point
cur2 := fs[side] 
level2 := level
// STEP 2: recurse back up, merging sorted suffixes (cur2) into the recursion level above (strs[level2 - 1])
while (level2 > 0) {
  tups = vec[((tri-state,int,int,int,int,int), int)](N) // virtual storage, hopefully not necessary, maximum size N
  pos := 0
  curLen := len(strs[level2 - 1])
  // like a windowedMapWithIndex over zip(cur2, strs[level2 - 1]) with window size 3
  while (pos < curLen) {
    tups[pos] = ((0, strs[level2 - 1][pos], strs[level2 - 1][pos + 1], strs[level2 - 1][pos + 2], cur2[pos], cur2[pos + 1]), pos) // out of bounds accesses replaced with '$'
    tups[pos + 1] = ((1, strs[level2 - 1][pos + 1], strs[level2 - 1][pos + 2], strs[level2 - 1][pos + 3], cur2[pos], cur2[pos + 1]), pos + 1) // out of bounds accesses replaced with '$'
    tups[pos + 2] = ((2, strs[level2 - 1][pos + 2], strs[level2 - 1][pos + 3], strs[level2 - 1][pos + 4], cur2[pos + 1], cur2[pos + 2]), pos + 2) // out of bounds accesses replaced with '$'
    pos += 3
  }
  sorted := sort(tups, 0, curLen, cmp = [custom triplet comparator on t.0])
  sortedWithIdx := mapWithIndex(sorted, (t, i) => (t.1, i))
  ordered := sort(sortedWithIdx, 0, cnt, key = t.0)
  fs[side] = flatMapWithIndex(ordered, (t, i) => if (i % 2 == 1) [t.1, '$'] else [t.1]) // so that cur2 and strs[level2 - 1] in the while loop above are the same length
  cur2 = fs[side]
  side = ~side 
  level2 -= 1
}

// cur2 is our answer

